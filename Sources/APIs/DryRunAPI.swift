//
// DryRunAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DryRunAPI {

    /**

     - parameter dryRunInput: (body) transactions 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func protectedDryRunTxs(dryRunInput: DryRunInput, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DryRunResults?, _ error: Error?) -> Void)) {
        protectedDryRunTxsWithRequestBuilder(dryRunInput: dryRunInput, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /dry-run
     - Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a default value of 1000000 is being used instead.
     - parameter dryRunInput: (body) transactions 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<DryRunResults> 
     */
    open class func protectedDryRunTxsWithRequestBuilder(dryRunInput: DryRunInput, intAsString: Bool? = nil) -> RequestBuilder<DryRunResults> {
        let localVariablePath = "/dry-run"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dryRunInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DryRunResults>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
