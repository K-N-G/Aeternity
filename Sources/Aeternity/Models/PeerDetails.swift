//
// PeerDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PeerDetails: Codable, Hashable {

    /** Hostname of peer */
    public var host: String
    public var port: ModelUInt32
    public var firstSeen: ModelUInt32
    public var lastSeen: ModelUInt32
    /** Base58Check encoded tagged hash */
    public var genesisHash: String
    /** Base58Check encoded tagged hash */
    public var topHash: String
    public var topDifficulty: ModelUInt64
    public var networkId: String?
    public var nodeVersion: String?
    public var nodeRevision: String?
    public var nodeVendor: String?
    public var nodeOs: String?

    public init(host: String, port: ModelUInt32, firstSeen: ModelUInt32, lastSeen: ModelUInt32, genesisHash: String, topHash: String, topDifficulty: ModelUInt64, networkId: String? = nil, nodeVersion: String? = nil, nodeRevision: String? = nil, nodeVendor: String? = nil, nodeOs: String? = nil) {
        self.host = host
        self.port = port
        self.firstSeen = firstSeen
        self.lastSeen = lastSeen
        self.genesisHash = genesisHash
        self.topHash = topHash
        self.topDifficulty = topDifficulty
        self.networkId = networkId
        self.nodeVersion = nodeVersion
        self.nodeRevision = nodeRevision
        self.nodeVendor = nodeVendor
        self.nodeOs = nodeOs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case host
        case port
        case firstSeen = "first_seen"
        case lastSeen = "last_seen"
        case genesisHash = "genesis_hash"
        case topHash = "top_hash"
        case topDifficulty = "top_difficulty"
        case networkId = "network_id"
        case nodeVersion = "node_version"
        case nodeRevision = "node_revision"
        case nodeVendor = "node_vendor"
        case nodeOs = "node_os"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(host, forKey: .host)
        try container.encode(port, forKey: .port)
        try container.encode(firstSeen, forKey: .firstSeen)
        try container.encode(lastSeen, forKey: .lastSeen)
        try container.encode(genesisHash, forKey: .genesisHash)
        try container.encode(topHash, forKey: .topHash)
        try container.encode(topDifficulty, forKey: .topDifficulty)
        try container.encodeIfPresent(networkId, forKey: .networkId)
        try container.encodeIfPresent(nodeVersion, forKey: .nodeVersion)
        try container.encodeIfPresent(nodeRevision, forKey: .nodeRevision)
        try container.encodeIfPresent(nodeVendor, forKey: .nodeVendor)
        try container.encodeIfPresent(nodeOs, forKey: .nodeOs)
    }
}

