//
// ContractCallTx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ContractCallTx: Codable, Hashable {

    /** Base58Check encoded tagged pubkey */
    public var callerId: String
    public var nonce: ModelUInt64?
    /** Base58Check encoded tagged pubkey */
    public var contractId: String
    public var abiVersion: ModelUInt16
    public var fee: ModelUInt
    public var ttl: ModelUInt64?
    public var amount: ModelUInt
    public var gas: ModelUInt64
    public var gasPrice: ModelUInt
    /** Base64Check encoded tagged byte array */
    public var callData: String

    public init(callerId: String, nonce: ModelUInt64? = nil, contractId: String, abiVersion: ModelUInt16, fee: ModelUInt, ttl: ModelUInt64? = nil, amount: ModelUInt, gas: ModelUInt64, gasPrice: ModelUInt, callData: String) {
        self.callerId = callerId
        self.nonce = nonce
        self.contractId = contractId
        self.abiVersion = abiVersion
        self.fee = fee
        self.ttl = ttl
        self.amount = amount
        self.gas = gas
        self.gasPrice = gasPrice
        self.callData = callData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case callerId = "caller_id"
        case nonce
        case contractId = "contract_id"
        case abiVersion = "abi_version"
        case fee
        case ttl
        case amount
        case gas
        case gasPrice = "gas_price"
        case callData = "call_data"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(callerId, forKey: .callerId)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encode(contractId, forKey: .contractId)
        try container.encode(abiVersion, forKey: .abiVersion)
        try container.encode(fee, forKey: .fee)
        try container.encodeIfPresent(ttl, forKey: .ttl)
        try container.encode(amount, forKey: .amount)
        try container.encode(gas, forKey: .gas)
        try container.encode(gasPrice, forKey: .gasPrice)
        try container.encode(callData, forKey: .callData)
    }
}

