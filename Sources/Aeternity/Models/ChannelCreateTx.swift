//
// ChannelCreateTx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ChannelCreateTx: Codable, Hashable {

    /** Base58Check encoded tagged pubkey */
    public var initiatorId: String
    public var initiatorAmount: ModelUInt
    /** Base58Check encoded tagged pubkey */
    public var responderId: String
    public var responderAmount: ModelUInt
    public var channelReserve: ModelUInt
    public var lockPeriod: ModelUInt64
    public var ttl: ModelUInt64?
    public var fee: ModelUInt
    public var nonce: ModelUInt64?
    /** Base58Check encoded tagged hash */
    public var stateHash: String
    public var delegateIds: Delegates?

    public init(initiatorId: String, initiatorAmount: ModelUInt, responderId: String, responderAmount: ModelUInt, channelReserve: ModelUInt, lockPeriod: ModelUInt64, ttl: ModelUInt64? = nil, fee: ModelUInt, nonce: ModelUInt64? = nil, stateHash: String, delegateIds: Delegates? = nil) {
        self.initiatorId = initiatorId
        self.initiatorAmount = initiatorAmount
        self.responderId = responderId
        self.responderAmount = responderAmount
        self.channelReserve = channelReserve
        self.lockPeriod = lockPeriod
        self.ttl = ttl
        self.fee = fee
        self.nonce = nonce
        self.stateHash = stateHash
        self.delegateIds = delegateIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case initiatorId = "initiator_id"
        case initiatorAmount = "initiator_amount"
        case responderId = "responder_id"
        case responderAmount = "responder_amount"
        case channelReserve = "channel_reserve"
        case lockPeriod = "lock_period"
        case ttl
        case fee
        case nonce
        case stateHash = "state_hash"
        case delegateIds = "delegate_ids"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(initiatorId, forKey: .initiatorId)
        try container.encode(initiatorAmount, forKey: .initiatorAmount)
        try container.encode(responderId, forKey: .responderId)
        try container.encode(responderAmount, forKey: .responderAmount)
        try container.encode(channelReserve, forKey: .channelReserve)
        try container.encode(lockPeriod, forKey: .lockPeriod)
        try container.encodeIfPresent(ttl, forKey: .ttl)
        try container.encode(fee, forKey: .fee)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encode(stateHash, forKey: .stateHash)
        try container.encodeIfPresent(delegateIds, forKey: .delegateIds)
    }
}

