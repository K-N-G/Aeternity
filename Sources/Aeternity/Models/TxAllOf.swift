//
// TxAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TxAllOf: Codable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case spendTx = "SpendTx"
        case channelCreateTx = "ChannelCreateTx"
        case channelDepositTx = "ChannelDepositTx"
        case channelWithdrawTx = "ChannelWithdrawTx"
        case channelForceProgressTx = "ChannelForceProgressTx"
        case channelCloseMutualTx = "ChannelCloseMutualTx"
        case channelCloseSoloTx = "ChannelCloseSoloTx"
        case channelSlashTx = "ChannelSlashTx"
        case channelSettleTx = "ChannelSettleTx"
        case channelSnapshotSoloTx = "ChannelSnapshotSoloTx"
        case channelSetDelegatesTx = "ChannelSetDelegatesTx"
        case oracleRegisterTx = "OracleRegisterTx"
        case oracleExtendTx = "OracleExtendTx"
        case oracleQueryTx = "OracleQueryTx"
        case oracleRespondTx = "OracleRespondTx"
        case namePreclaimTx = "NamePreclaimTx"
        case nameClaimTx = "NameClaimTx"
        case nameUpdateTx = "NameUpdateTx"
        case nameTransferTx = "NameTransferTx"
        case nameRevokeTx = "NameRevokeTx"
        case contractCreateTx = "ContractCreateTx"
        case contractCallTx = "ContractCallTx"
        case gaattachtx = "GAAttachTx"
        case gametatx = "GAMetaTx"
        case payingForTx = "PayingForTx"
    }
    public var version: ModelUInt32
    public var type: ModelType

    public init(version: ModelUInt32, type: ModelType) {
        self.version = version
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(version, forKey: .version)
        try container.encode(type, forKey: .type)
    }
}

