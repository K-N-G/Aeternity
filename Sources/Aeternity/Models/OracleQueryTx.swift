//
// OracleQueryTx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OracleQueryTx: Codable, Hashable {

    /** Base58Check encoded tagged pubkey */
    public var oracleId: String
    public var query: String
    public var queryFee: ModelUInt
    public var queryTtl: TTL
    public var responseTtl: RelativeTTL
    public var fee: ModelUInt
    public var ttl: ModelUInt64?
    /** Base58Check encoded tagged pubkey */
    public var senderId: String
    public var nonce: ModelUInt64?

    public init(oracleId: String, query: String, queryFee: ModelUInt, queryTtl: TTL, responseTtl: RelativeTTL, fee: ModelUInt, ttl: ModelUInt64? = nil, senderId: String, nonce: ModelUInt64? = nil) {
        self.oracleId = oracleId
        self.query = query
        self.queryFee = queryFee
        self.queryTtl = queryTtl
        self.responseTtl = responseTtl
        self.fee = fee
        self.ttl = ttl
        self.senderId = senderId
        self.nonce = nonce
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case oracleId = "oracle_id"
        case query
        case queryFee = "query_fee"
        case queryTtl = "query_ttl"
        case responseTtl = "response_ttl"
        case fee
        case ttl
        case senderId = "sender_id"
        case nonce
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(oracleId, forKey: .oracleId)
        try container.encode(query, forKey: .query)
        try container.encode(queryFee, forKey: .queryFee)
        try container.encode(queryTtl, forKey: .queryTtl)
        try container.encode(responseTtl, forKey: .responseTtl)
        try container.encode(fee, forKey: .fee)
        try container.encodeIfPresent(ttl, forKey: .ttl)
        try container.encode(senderId, forKey: .senderId)
        try container.encodeIfPresent(nonce, forKey: .nonce)
    }
}

