//
// OracleQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OracleQuery: Codable, Hashable {

    /** Base58Check encoded tagged value */
    public var id: String
    /** Base58Check encoded tagged pubkey */
    public var senderId: String
    public var senderNonce: ModelUInt64
    /** Base58Check encoded tagged pubkey */
    public var oracleId: String
    public var query: String
    public var response: String
    public var ttl: ModelUInt64
    public var responseTtl: TTL
    public var fee: ModelUInt

    public init(id: String, senderId: String, senderNonce: ModelUInt64, oracleId: String, query: String, response: String, ttl: ModelUInt64, responseTtl: TTL, fee: ModelUInt) {
        self.id = id
        self.senderId = senderId
        self.senderNonce = senderNonce
        self.oracleId = oracleId
        self.query = query
        self.response = response
        self.ttl = ttl
        self.responseTtl = responseTtl
        self.fee = fee
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case senderId = "sender_id"
        case senderNonce = "sender_nonce"
        case oracleId = "oracle_id"
        case query
        case response
        case ttl
        case responseTtl = "response_ttl"
        case fee
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(senderId, forKey: .senderId)
        try container.encode(senderNonce, forKey: .senderNonce)
        try container.encode(oracleId, forKey: .oracleId)
        try container.encode(query, forKey: .query)
        try container.encode(response, forKey: .response)
        try container.encode(ttl, forKey: .ttl)
        try container.encode(responseTtl, forKey: .responseTtl)
        try container.encode(fee, forKey: .fee)
    }
}

