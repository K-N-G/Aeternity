//
// OracleExtendTx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OracleExtendTx: Codable, Hashable {

    public var fee: ModelUInt
    public var oracleTtl: RelativeTTL
    /** Base58Check encoded tagged pubkey */
    public var oracleId: String
    public var nonce: ModelUInt64?
    public var ttl: ModelUInt64?

    public init(fee: ModelUInt, oracleTtl: RelativeTTL, oracleId: String, nonce: ModelUInt64? = nil, ttl: ModelUInt64? = nil) {
        self.fee = fee
        self.oracleTtl = oracleTtl
        self.oracleId = oracleId
        self.nonce = nonce
        self.ttl = ttl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fee
        case oracleTtl = "oracle_ttl"
        case oracleId = "oracle_id"
        case nonce
        case ttl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fee, forKey: .fee)
        try container.encode(oracleTtl, forKey: .oracleTtl)
        try container.encode(oracleId, forKey: .oracleId)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encodeIfPresent(ttl, forKey: .ttl)
    }
}

