//
// RegisteredOracle.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RegisteredOracle: Codable, Hashable {

    /** Base58Check encoded tagged pubkey */
    public var id: String
    public var queryFormat: String
    public var responseFormat: String
    public var queryFee: ModelUInt
    public var ttl: ModelUInt64
    public var abiVersion: ModelUInt16

    public init(id: String, queryFormat: String, responseFormat: String, queryFee: ModelUInt, ttl: ModelUInt64, abiVersion: ModelUInt16) {
        self.id = id
        self.queryFormat = queryFormat
        self.responseFormat = responseFormat
        self.queryFee = queryFee
        self.ttl = ttl
        self.abiVersion = abiVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case queryFormat = "query_format"
        case responseFormat = "response_format"
        case queryFee = "query_fee"
        case ttl
        case abiVersion = "abi_version"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(queryFormat, forKey: .queryFormat)
        try container.encode(responseFormat, forKey: .responseFormat)
        try container.encode(queryFee, forKey: .queryFee)
        try container.encode(ttl, forKey: .ttl)
        try container.encode(abiVersion, forKey: .abiVersion)
    }
}

