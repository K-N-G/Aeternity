//
// ChannelForceProgressTx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ChannelForceProgressTx: Codable, Hashable {

    /** Base58Check encoded tagged pubkey */
    public var channelId: String
    /** Base58Check encoded tagged pubkey */
    public var fromId: String
    /** Base64Check encoded tagged byte array */
    public var payload: String
    public var round: ModelUInt64
    public var update: OffChainUpdate
    /** Base58Check encoded tagged hash */
    public var stateHash: String
    public var ttl: ModelUInt64?
    public var fee: ModelUInt
    public var nonce: ModelUInt64?
    /** Base64Check encoded tagged byte array */
    public var offchainTrees: String?

    public init(channelId: String, fromId: String, payload: String, round: ModelUInt64, update: OffChainUpdate, stateHash: String, ttl: ModelUInt64? = nil, fee: ModelUInt, nonce: ModelUInt64? = nil, offchainTrees: String? = nil) {
        self.channelId = channelId
        self.fromId = fromId
        self.payload = payload
        self.round = round
        self.update = update
        self.stateHash = stateHash
        self.ttl = ttl
        self.fee = fee
        self.nonce = nonce
        self.offchainTrees = offchainTrees
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channelId = "channel_id"
        case fromId = "from_id"
        case payload
        case round
        case update
        case stateHash = "state_hash"
        case ttl
        case fee
        case nonce
        case offchainTrees = "offchain_trees"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(channelId, forKey: .channelId)
        try container.encode(fromId, forKey: .fromId)
        try container.encode(payload, forKey: .payload)
        try container.encode(round, forKey: .round)
        try container.encode(update, forKey: .update)
        try container.encode(stateHash, forKey: .stateHash)
        try container.encodeIfPresent(ttl, forKey: .ttl)
        try container.encode(fee, forKey: .fee)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encodeIfPresent(offchainTrees, forKey: .offchainTrees)
    }
}

