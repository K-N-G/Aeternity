//
// GAMetaTx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GAMetaTx: Codable, Hashable {

    /** Base58Check encoded tagged pubkey */
    public var gaId: String
    public var abiVersion: ModelUInt16
    public var gas: ModelUInt64
    public var gasPrice: ModelUInt
    public var fee: ModelUInt
    public var ttl: ModelUInt64?
    /** Base64Check encoded tagged byte array */
    public var authData: String
    public var tx: SignedTx

    public init(gaId: String, abiVersion: ModelUInt16, gas: ModelUInt64, gasPrice: ModelUInt, fee: ModelUInt, ttl: ModelUInt64? = nil, authData: String, tx: SignedTx) {
        self.gaId = gaId
        self.abiVersion = abiVersion
        self.gas = gas
        self.gasPrice = gasPrice
        self.fee = fee
        self.ttl = ttl
        self.authData = authData
        self.tx = tx
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case gaId = "ga_id"
        case abiVersion = "abi_version"
        case gas
        case gasPrice = "gas_price"
        case fee
        case ttl
        case authData = "auth_data"
        case tx
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(gaId, forKey: .gaId)
        try container.encode(abiVersion, forKey: .abiVersion)
        try container.encode(gas, forKey: .gas)
        try container.encode(gasPrice, forKey: .gasPrice)
        try container.encode(fee, forKey: .fee)
        try container.encodeIfPresent(ttl, forKey: .ttl)
        try container.encode(authData, forKey: .authData)
        try container.encode(tx, forKey: .tx)
    }
}

