//
// Account.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Account: Codable, Hashable {

    public enum Kind: String, Codable, CaseIterable {
        case basic = "basic"
        case generalized = "generalized"
    }
    /** Base58Check encoded tagged pubkey */
    public var id: String
    public var balance: ModelUInt
    public var nonce: ModelUInt64
    /** Payable */
    public var payable: Bool?
    public var kind: Kind?
    /** Base58Check encoded tagged pubkey */
    public var contractId: String?
    /** Name of authorization function for generalized account */
    public var authFun: String?

    public init(id: String, balance: ModelUInt, nonce: ModelUInt64, payable: Bool? = nil, kind: Kind? = nil, contractId: String? = nil, authFun: String? = nil) {
        self.id = id
        self.balance = balance
        self.nonce = nonce
        self.payable = payable
        self.kind = kind
        self.contractId = contractId
        self.authFun = authFun
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case balance
        case nonce
        case payable
        case kind
        case contractId = "contract_id"
        case authFun = "auth_fun"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(balance, forKey: .balance)
        try container.encode(nonce, forKey: .nonce)
        try container.encodeIfPresent(payable, forKey: .payable)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(contractId, forKey: .contractId)
        try container.encodeIfPresent(authFun, forKey: .authFun)
    }
}

