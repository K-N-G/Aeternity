//
// MiddlewareAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MiddlewareAPI {

    /**
     * enum for parameter by
     */
    public enum By_getActiveNames: String, CaseIterable {
        case expiration = "expiration"
        case name = "name"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_getActiveNames: String, CaseIterable {
        case forward = "forward"
        case backward = "backward"
    }

    /**

     - parameter by: (query) The ordering via parameters. (optional, default to .expiration)
     - parameter direction: (query) The direction - **forward** is from genesis to the end, **backward** is from end to the beginning. (optional, default to .backward)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActiveNames(by: By_getActiveNames? = nil, direction: Direction_getActiveNames? = nil, page: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getActiveNamesWithRequestBuilder(by: by, direction: direction, page: page, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /names/active
     - Get active names.
     - parameter by: (query) The ordering via parameters. (optional, default to .expiration)
     - parameter direction: (query) The direction - **forward** is from genesis to the end, **backward** is from end to the beginning. (optional, default to .backward)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getActiveNamesWithRequestBuilder(by: By_getActiveNames? = nil, direction: Direction_getActiveNames? = nil, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/names/active"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "by": by?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter by
     */
    public enum By_getAllAuctions: String, CaseIterable {
        case expiration = "expiration"
        case name = "name"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_getAllAuctions: String, CaseIterable {
        case forward = "forward"
        case backward = "backward"
    }

    /**

     - parameter by: (query) The ordering via parameters. (optional, default to .expiration)
     - parameter direction: (query) The direction - **forward** is from genesis to the end, **backward** is from end to the beginning. (optional, default to .backward)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllAuctions(by: By_getAllAuctions? = nil, direction: Direction_getAllAuctions? = nil, page: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NameAuctions?, _ error: Error?) -> Void)) {
        getAllAuctionsWithRequestBuilder(by: by, direction: direction, page: page, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /names/auctions
     - Get all auctions.
     - parameter by: (query) The ordering via parameters. (optional, default to .expiration)
     - parameter direction: (query) The direction - **forward** is from genesis to the end, **backward** is from end to the beginning. (optional, default to .backward)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - returns: RequestBuilder<NameAuctions> 
     */
    open class func getAllAuctionsWithRequestBuilder(by: By_getAllAuctions? = nil, direction: Direction_getAllAuctions? = nil, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<NameAuctions> {
        let localVariablePath = "/names/auctions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "by": by?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NameAuctions>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter by
     */
    public enum By_getAllNames: String, CaseIterable {
        case expiration = "expiration"
        case name = "name"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_getAllNames: String, CaseIterable {
        case forward = "forward"
        case backward = "backward"
    }

    /**

     - parameter by: (query) The ordering via parameters. (optional, default to .expiration)
     - parameter direction: (query) The direction - **forward** is from genesis to the end, **backward** is from end to the beginning. (optional, default to .backward)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllNames(by: By_getAllNames? = nil, direction: Direction_getAllNames? = nil, page: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getAllNamesWithRequestBuilder(by: by, direction: direction, page: page, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /names
     - Get all active and inactive names, except those in auction.
     - parameter by: (query) The ordering via parameters. (optional, default to .expiration)
     - parameter direction: (query) The direction - **forward** is from genesis to the end, **backward** is from end to the beginning. (optional, default to .backward)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getAllNamesWithRequestBuilder(by: By_getAllNames? = nil, direction: Direction_getAllNames? = nil, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/names"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "by": by?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The key/micro block hash. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBlockByHash(hash: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getBlockByHashWithRequestBuilder(hash: hash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /block/{hash}
     - Get block information by given key/micro block hash.
     - parameter hash: (path) The key/micro block hash. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getBlockByHashWithRequestBuilder(hash: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/block/{hash}"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter kbi: (path) The key block index(height). 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBlockByKbi(kbi: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getBlockByKbiWithRequestBuilder(kbi: kbi).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /blocki/{kbi}
     - Get key block information by given key block index(height).
     - parameter kbi: (path) The key block index(height). 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getBlockByKbiWithRequestBuilder(kbi: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/blocki/{kbi}"
        let kbiPreEscape = "\(APIHelper.mapValueToPathItem(kbi))"
        let kbiPostEscape = kbiPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kbi}", with: kbiPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter kbi: (path) The key block index(height). 
     - parameter mbi: (path) The micro block index. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBlockByKbiAndMbi(kbi: Int, mbi: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getBlockByKbiAndMbiWithRequestBuilder(kbi: kbi, mbi: mbi).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /blocki/{kbi}/{mbi}
     - Get micro block information by given key block index(height) and micro block index.
     - parameter kbi: (path) The key block index(height). 
     - parameter mbi: (path) The micro block index. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getBlockByKbiAndMbiWithRequestBuilder(kbi: Int, mbi: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/blocki/{kbi}/{mbi}"
        let kbiPreEscape = "\(APIHelper.mapValueToPathItem(kbi))"
        let kbiPostEscape = kbiPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kbi}", with: kbiPostEscape, options: .literal, range: nil)
        let mbiPreEscape = "\(APIHelper.mapValueToPathItem(mbi))"
        let mbiPostEscape = mbiPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mbi}", with: mbiPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter rangeOrDir: (path) The direction, which could be **forward** or **backward**, or non-negative integer range. 
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBlocks(rangeOrDir: String, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getBlocksWithRequestBuilder(rangeOrDir: rangeOrDir, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /blocks/{range_or_dir}
     - Get multiple generations.
     - parameter rangeOrDir: (path) The direction, which could be **forward** or **backward**, or non-negative integer range. 
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getBlocksWithRequestBuilder(rangeOrDir: String, limit: Int? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/blocks/{range_or_dir}"
        let rangeOrDirPreEscape = "\(APIHelper.mapValueToPathItem(rangeOrDir))"
        let rangeOrDirPostEscape = rangeOrDirPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{range_or_dir}", with: rangeOrDirPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentTxCount(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getCurrentTxCountWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /txs/count
     - Get count of transactions at the current height.
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getCurrentTxCountWithRequestBuilder() -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/txs/count"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) The name or encoded hash. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNameAuctionById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NameAuction?, _ error: Error?) -> Void)) {
        getNameAuctionByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /name/auction/{id}
     - parameter id: (path) The name or encoded hash. 
     - returns: RequestBuilder<NameAuction> 
     */
    open class func getNameAuctionByIdWithRequestBuilder(id: String) -> RequestBuilder<NameAuction> {
        var localVariablePath = "/name/auction/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NameAuction>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) The name or encoded hash. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNameById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getNameByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /name/{id}
     - Get information for given name or encoded hash.
     - parameter id: (path) The name or encoded hash. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getNameByIdWithRequestBuilder(id: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/name/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) The public key. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPointeesById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getPointeesByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /names/pointees/{id}
     - Get names pointing to a particular pubkey.
     - parameter id: (path) The public key. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getPointeesByIdWithRequestBuilder(id: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/names/pointees/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) The name. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPointersById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getPointersByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /names/pointers/{id}
     - Get pointers for given name.
     - parameter id: (path) The name. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getPointersByIdWithRequestBuilder(id: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/names/pointers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStatus(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Status?, _ error: Error?) -> Void)) {
        getStatusWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /status
     - Get middleware status.
     - returns: RequestBuilder<Status> 
     */
    open class func getStatusWithRequestBuilder() -> RequestBuilder<Status> {
        let localVariablePath = "/status"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Status>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The transaction hash. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTxByHash(hash: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getTxByHashWithRequestBuilder(hash: hash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /tx/{hash}
     - Get a transaction by a given hash.
     - parameter hash: (path) The transaction hash. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getTxByHashWithRequestBuilder(hash: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/tx/{hash}"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter index: (path) The transaction index. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTxByIndex(index: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getTxByIndexWithRequestBuilder(index: index).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /txi/{index}
     - Get a transaction by a given index.
     - parameter index: (path) The transaction index. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getTxByIndexWithRequestBuilder(index: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/txi/{index}"
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) The ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTxCountById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getTxCountByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /txs/count/{id}
     - Get transactions count and its type for given aeternity ID.
     - parameter id: (path) The ID. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getTxCountByIdWithRequestBuilder(id: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/txs/count/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_getTxsByDirection: String, CaseIterable {
        case forward = "forward"
        case backward = "backward"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getTxsByDirection: String, CaseIterable {
        case channelCloseMutual = "channel_close_mutual"
        case channelCloseSolo = "channel_close_solo"
        case channelCreate = "channel_create"
        case channelDeposit = "channel_deposit"
        case channelForceProgress = "channel_force_progress"
        case channelOffchain = "channel_offchain"
        case channelSettle = "channel_settle"
        case channelSlash = "channel_slash"
        case channelSnapshotSolo = "channel_snapshot_solo"
        case channelWithdraw = "channel_withdraw"
        case contractCall = "contract_call"
        case contractCreate = "contract_create"
        case gaAttach = "ga_attach"
        case gaMeta = "ga_meta"
        case nameClaim = "name_claim"
        case namePreclaim = "name_preclaim"
        case nameRevoke = "name_revoke"
        case nameTransfer = "name_transfer"
        case nameUpdate = "name_update"
        case oracleExtend = "oracle_extend"
        case oracleQuery = "oracle_query"
        case oracleRegister = "oracle_register"
        case oracleResponse = "oracle_response"
        case payingFor = "paying_for"
        case spend = "spend"
    }

    /**
     * enum for parameter typeGroup
     */
    public enum TypeGroup_getTxsByDirection: String, CaseIterable {
        case channel = "channel"
        case contract = "contract"
        case ga = "ga"
        case name = "name"
        case oracle = "oracle"
        case payingFor = "paying_for"
        case spend = "spend"
    }

    /**

     - parameter direction: (path) The direction - **forward** is from genesis to the end, **backward** is from end to the beginning. 
     - parameter type: (query) The transaction type. The query allows providing of multiple type parameters. [More info](https://github.com/aeternity/ae_mdw#types). (optional)
     - parameter typeGroup: (query) The type group. The query allows providing of multiple type group parameters. [More info](https://github.com/aeternity/ae_mdw#types). (optional)
     - parameter account: (query) The account ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter contract: (query) The contract ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter channel: (query) The channel ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter oracle: (query) The oracle ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - parameter senderId: (query) The sender ID. (optional)
     - parameter recipientId: (query) The recipient ID. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTxsByDirection(direction: Direction_getTxsByDirection, type: [String]? = nil, typeGroup: [String]? = nil, account: String? = nil, contract: String? = nil, channel: String? = nil, oracle: String? = nil, page: Int? = nil, limit: Int? = nil, senderId: String? = nil, recipientId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getTxsByDirectionWithRequestBuilder(direction: direction, type: type, typeGroup: typeGroup, account: account, contract: contract, channel: channel, oracle: oracle, page: page, limit: limit, senderId: senderId, recipientId: recipientId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /txs/{direction}
     - Get a transactions from beginning or end of the chain. More [info](https://github.com/aeternity/ae_mdw#transaction-querying).
     - parameter direction: (path) The direction - **forward** is from genesis to the end, **backward** is from end to the beginning. 
     - parameter type: (query) The transaction type. The query allows providing of multiple type parameters. [More info](https://github.com/aeternity/ae_mdw#types). (optional)
     - parameter typeGroup: (query) The type group. The query allows providing of multiple type group parameters. [More info](https://github.com/aeternity/ae_mdw#types). (optional)
     - parameter account: (query) The account ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter contract: (query) The contract ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter channel: (query) The channel ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter oracle: (query) The oracle ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - parameter senderId: (query) The sender ID. (optional)
     - parameter recipientId: (query) The recipient ID. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getTxsByDirectionWithRequestBuilder(direction: Direction_getTxsByDirection, type: [String]? = nil, typeGroup: [String]? = nil, account: String? = nil, contract: String? = nil, channel: String? = nil, oracle: String? = nil, page: Int? = nil, limit: Int? = nil, senderId: String? = nil, recipientId: String? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/txs/{direction}"
        let directionPreEscape = "\(direction.rawValue)"
        let directionPostEscape = directionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{direction}", with: directionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.encodeToJSON(),
            "type_group": typeGroup?.encodeToJSON(),
            "account": account?.encodeToJSON(),
            "contract": contract?.encodeToJSON(),
            "channel": channel?.encodeToJSON(),
            "oracle": oracle?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sender_id": senderId?.encodeToJSON(),
            "recipient_id": recipientId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter scopeType
     */
    public enum ScopeType_getTxsByScopeTypeRange: String, CaseIterable {
        case gen = "gen"
        case txi = "txi"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getTxsByScopeTypeRange: String, CaseIterable {
        case channelCloseMutual = "channel_close_mutual"
        case channelCloseSolo = "channel_close_solo"
        case channelCreate = "channel_create"
        case channelDeposit = "channel_deposit"
        case channelForceProgress = "channel_force_progress"
        case channelOffchain = "channel_offchain"
        case channelSettle = "channel_settle"
        case channelSlash = "channel_slash"
        case channelSnapshotSolo = "channel_snapshot_solo"
        case channelWithdraw = "channel_withdraw"
        case contractCall = "contract_call"
        case contractCreate = "contract_create"
        case gaAttach = "ga_attach"
        case gaMeta = "ga_meta"
        case nameClaim = "name_claim"
        case namePreclaim = "name_preclaim"
        case nameRevoke = "name_revoke"
        case nameTransfer = "name_transfer"
        case nameUpdate = "name_update"
        case oracleExtend = "oracle_extend"
        case oracleQuery = "oracle_query"
        case oracleRegister = "oracle_register"
        case oracleResponse = "oracle_response"
        case payingFor = "paying_for"
        case spend = "spend"
    }

    /**
     * enum for parameter typeGroup
     */
    public enum TypeGroup_getTxsByScopeTypeRange: String, CaseIterable {
        case channel = "channel"
        case contract = "contract"
        case ga = "ga"
        case name = "name"
        case oracle = "oracle"
        case payingFor = "paying_for"
        case spend = "spend"
    }

    /**

     - parameter scopeType: (path) The scope type. 
     - parameter range: (path) The range. 
     - parameter type: (query) The transaction type. The query allows providing of multiple type parameters. [More info](https://github.com/aeternity/ae_mdw#types). (optional)
     - parameter typeGroup: (query) The type group. The query allows providing of multiple type group parameters. [More info](https://github.com/aeternity/ae_mdw#types). (optional)
     - parameter account: (query) The account ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter contract: (query) The contract ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter channel: (query) The channel ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter oracle: (query) The oracle ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTxsByScopeTypeRange(scopeType: ScopeType_getTxsByScopeTypeRange, range: String, type: [String]? = nil, typeGroup: [String]? = nil, account: String? = nil, contract: String? = nil, channel: String? = nil, oracle: String? = nil, page: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getTxsByScopeTypeRangeWithRequestBuilder(scopeType: scopeType, range: range, type: type, typeGroup: typeGroup, account: account, contract: contract, channel: channel, oracle: oracle, page: page, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /txs/{scope_type}/{range}
     - Get a transactions bounded by scope/range.
     - parameter scopeType: (path) The scope type. 
     - parameter range: (path) The range. 
     - parameter type: (query) The transaction type. The query allows providing of multiple type parameters. [More info](https://github.com/aeternity/ae_mdw#types). (optional)
     - parameter typeGroup: (query) The type group. The query allows providing of multiple type group parameters. [More info](https://github.com/aeternity/ae_mdw#types). (optional)
     - parameter account: (query) The account ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter contract: (query) The contract ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter channel: (query) The channel ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter oracle: (query) The oracle ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids). (optional)
     - parameter page: (query) The number of page to show. (optional, default to 1)
     - parameter limit: (query) The numbers of items to return. (optional, default to 10)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getTxsByScopeTypeRangeWithRequestBuilder(scopeType: ScopeType_getTxsByScopeTypeRange, range: String, type: [String]? = nil, typeGroup: [String]? = nil, account: String? = nil, contract: String? = nil, channel: String? = nil, oracle: String? = nil, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/txs/{scope_type}/{range}"
        let scopeTypePreEscape = "\(scopeType.rawValue)"
        let scopeTypePostEscape = scopeTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{scope_type}", with: scopeTypePostEscape, options: .literal, range: nil)
        let rangePreEscape = "\(APIHelper.mapValueToPathItem(range))"
        let rangePostEscape = rangePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{range}", with: rangePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.encodeToJSON(),
            "type_group": typeGroup?.encodeToJSON(),
            "account": account?.encodeToJSON(),
            "contract": contract?.encodeToJSON(),
            "channel": channel?.encodeToJSON(),
            "oracle": oracle?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
