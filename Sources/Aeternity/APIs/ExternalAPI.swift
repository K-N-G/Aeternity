//
// ExternalAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ExternalAPI {

    /**

     - parameter pubkey: (path) The public key of the account 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountByPubkey(pubkey: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Account?, _ error: Error?) -> Void)) {
        getAccountByPubkeyWithRequestBuilder(pubkey: pubkey, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /accounts/{pubkey}
     - Get an account by public key
     - parameter pubkey: (path) The public key of the account 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Account> 
     */
    open class func getAccountByPubkeyWithRequestBuilder(pubkey: String, intAsString: Bool? = nil) -> RequestBuilder<Account> {
        var localVariablePath = "/accounts/{pubkey}"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Account>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter pubkey: (path) The public key of the account 
     - parameter hash: (path) The hash of the block - either a keyblock or a microblock 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountByPubkeyAndHash(pubkey: String, hash: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Account?, _ error: Error?) -> Void)) {
        getAccountByPubkeyAndHashWithRequestBuilder(pubkey: pubkey, hash: hash, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /accounts/{pubkey}/hash/{hash}
     - Get an account by public key after the block indicated by hash. Can be either a micro block or a keyblock hash
     - parameter pubkey: (path) The public key of the account 
     - parameter hash: (path) The hash of the block - either a keyblock or a microblock 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Account> 
     */
    open class func getAccountByPubkeyAndHashWithRequestBuilder(pubkey: String, hash: String, intAsString: Bool? = nil) -> RequestBuilder<Account> {
        var localVariablePath = "/accounts/{pubkey}/hash/{hash}"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Account>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter pubkey: (path) The public key of the account 
     - parameter height: (path) The height 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountByPubkeyAndHeight(pubkey: String, height: Int, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Account?, _ error: Error?) -> Void)) {
        getAccountByPubkeyAndHeightWithRequestBuilder(pubkey: pubkey, height: height, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /accounts/{pubkey}/height/{height}
     - Get an account by public key after the opening key block of the generation at height
     - parameter pubkey: (path) The public key of the account 
     - parameter height: (path) The height 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Account> 
     */
    open class func getAccountByPubkeyAndHeightWithRequestBuilder(pubkey: String, height: Int, intAsString: Bool? = nil) -> RequestBuilder<Account> {
        var localVariablePath = "/accounts/{pubkey}/height/{height}"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let heightPreEscape = "\(APIHelper.mapValueToPathItem(height))"
        let heightPostEscape = heightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{height}", with: heightPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Account>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChainEnds(intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) {
        getChainEndsWithRequestBuilder(intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /status/chain-ends
     - Get oldest keyblock hashes counting from genesis including orphans
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<[String]> 
     */
    open class func getChainEndsWithRequestBuilder(intAsString: Bool? = nil) -> RequestBuilder<[String]> {
        let localVariablePath = "/status/chain-ends"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter pubkey: (path) The pubkey of the channel 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChannelByPubkey(pubkey: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Channel?, _ error: Error?) -> Void)) {
        getChannelByPubkeyWithRequestBuilder(pubkey: pubkey, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /channels/{pubkey}
     - Get channel by public key
     - parameter pubkey: (path) The pubkey of the channel 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Channel> 
     */
    open class func getChannelByPubkeyWithRequestBuilder(pubkey: String, intAsString: Bool? = nil) -> RequestBuilder<Channel> {
        var localVariablePath = "/channels/{pubkey}"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Channel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter pubkey: (path) Contract pubkey to get proof for 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContract(pubkey: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ContractObject?, _ error: Error?) -> Void)) {
        getContractWithRequestBuilder(pubkey: pubkey, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /contracts/{pubkey}
     - Get a contract by pubkey
     - parameter pubkey: (path) Contract pubkey to get proof for 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<ContractObject> 
     */
    open class func getContractWithRequestBuilder(pubkey: String, intAsString: Bool? = nil) -> RequestBuilder<ContractObject> {
        var localVariablePath = "/contracts/{pubkey}"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ContractObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter pubkey: (path) Contract pubkey to get proof for 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContractCode(pubkey: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ByteCode?, _ error: Error?) -> Void)) {
        getContractCodeWithRequestBuilder(pubkey: pubkey, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /contracts/{pubkey}/code
     - Get contract code by pubkey
     - parameter pubkey: (path) Contract pubkey to get proof for 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<ByteCode> 
     */
    open class func getContractCodeWithRequestBuilder(pubkey: String, intAsString: Bool? = nil) -> RequestBuilder<ByteCode> {
        var localVariablePath = "/contracts/{pubkey}/code"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ByteCode>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter pubkey: (path) Contract pubkey to get proof for 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContractPoI(pubkey: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PoI?, _ error: Error?) -> Void)) {
        getContractPoIWithRequestBuilder(pubkey: pubkey, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /contracts/{pubkey}/poi
     - Get a proof of inclusion for a contract
     - parameter pubkey: (path) Contract pubkey to get proof for 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<PoI> 
     */
    open class func getContractPoIWithRequestBuilder(pubkey: String, intAsString: Bool? = nil) -> RequestBuilder<PoI> {
        var localVariablePath = "/contracts/{pubkey}/poi"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PoI>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentGeneration(intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Generation?, _ error: Error?) -> Void)) {
        getCurrentGenerationWithRequestBuilder(intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /generations/current
     - Get the current generation
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Generation> 
     */
    open class func getCurrentGenerationWithRequestBuilder(intAsString: Bool? = nil) -> RequestBuilder<Generation> {
        let localVariablePath = "/generations/current"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Generation>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentKeyBlock(intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: KeyBlock?, _ error: Error?) -> Void)) {
        getCurrentKeyBlockWithRequestBuilder(intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /key-blocks/current
     - Get the current key block
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<KeyBlock> 
     */
    open class func getCurrentKeyBlockWithRequestBuilder(intAsString: Bool? = nil) -> RequestBuilder<KeyBlock> {
        let localVariablePath = "/key-blocks/current"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KeyBlock>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentKeyBlockHash(intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: HashResponse?, _ error: Error?) -> Void)) {
        getCurrentKeyBlockHashWithRequestBuilder(intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /key-blocks/current/hash
     - Get the hash of the current key block
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<HashResponse> 
     */
    open class func getCurrentKeyBlockHashWithRequestBuilder(intAsString: Bool? = nil) -> RequestBuilder<HashResponse> {
        let localVariablePath = "/key-blocks/current/hash"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HashResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentKeyBlockHeight(intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: HeightResponse?, _ error: Error?) -> Void)) {
        getCurrentKeyBlockHeightWithRequestBuilder(intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /key-blocks/current/height
     - Get the height of the current key block
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<HeightResponse> 
     */
    open class func getCurrentKeyBlockHeightWithRequestBuilder(intAsString: Bool? = nil) -> RequestBuilder<HeightResponse> {
        let localVariablePath = "/key-blocks/current/height"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HeightResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The hash of the key block 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGenerationByHash(hash: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Generation?, _ error: Error?) -> Void)) {
        getGenerationByHashWithRequestBuilder(hash: hash, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /generations/hash/{hash}
     - Get a generation by hash
     - parameter hash: (path) The hash of the key block 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Generation> 
     */
    open class func getGenerationByHashWithRequestBuilder(hash: String, intAsString: Bool? = nil) -> RequestBuilder<Generation> {
        var localVariablePath = "/generations/hash/{hash}"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Generation>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter height: (path) The height 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGenerationByHeight(height: Int, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Generation?, _ error: Error?) -> Void)) {
        getGenerationByHeightWithRequestBuilder(height: height, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /generations/height/{height}
     - Get a generation by height
     - parameter height: (path) The height 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Generation> 
     */
    open class func getGenerationByHeightWithRequestBuilder(height: Int, intAsString: Bool? = nil) -> RequestBuilder<Generation> {
        var localVariablePath = "/generations/height/{height}"
        let heightPreEscape = "\(APIHelper.mapValueToPathItem(height))"
        let heightPostEscape = heightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{height}", with: heightPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Generation>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The hash of the block - either a keyblock or a microblock 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKeyBlockByHash(hash: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: KeyBlock?, _ error: Error?) -> Void)) {
        getKeyBlockByHashWithRequestBuilder(hash: hash, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /key-blocks/hash/{hash}
     - Get a key block by hash
     - parameter hash: (path) The hash of the block - either a keyblock or a microblock 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<KeyBlock> 
     */
    open class func getKeyBlockByHashWithRequestBuilder(hash: String, intAsString: Bool? = nil) -> RequestBuilder<KeyBlock> {
        var localVariablePath = "/key-blocks/hash/{hash}"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KeyBlock>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter height: (path) The height 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKeyBlockByHeight(height: Int, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: KeyBlock?, _ error: Error?) -> Void)) {
        getKeyBlockByHeightWithRequestBuilder(height: height, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /key-blocks/height/{height}
     - Get a key block by height
     - parameter height: (path) The height 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<KeyBlock> 
     */
    open class func getKeyBlockByHeightWithRequestBuilder(height: Int, intAsString: Bool? = nil) -> RequestBuilder<KeyBlock> {
        var localVariablePath = "/key-blocks/height/{height}"
        let heightPreEscape = "\(APIHelper.mapValueToPathItem(height))"
        let heightPostEscape = heightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{height}", with: heightPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KeyBlock>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The hash of the block - either a keyblock or a microblock 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMicroBlockHeaderByHash(hash: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MicroBlockHeader?, _ error: Error?) -> Void)) {
        getMicroBlockHeaderByHashWithRequestBuilder(hash: hash, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /micro-blocks/hash/{hash}/header
     - Get a micro block header by hash
     - parameter hash: (path) The hash of the block - either a keyblock or a microblock 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<MicroBlockHeader> 
     */
    open class func getMicroBlockHeaderByHashWithRequestBuilder(hash: String, intAsString: Bool? = nil) -> RequestBuilder<MicroBlockHeader> {
        var localVariablePath = "/micro-blocks/hash/{hash}/header"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicroBlockHeader>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The hash of the micro block 
     - parameter index: (path) The index of the transaction in a block 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMicroBlockTransactionByHashAndIndex(hash: String, index: Int, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SignedTx?, _ error: Error?) -> Void)) {
        getMicroBlockTransactionByHashAndIndexWithRequestBuilder(hash: hash, index: index, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /micro-blocks/hash/{hash}/transactions/index/{index}
     - Get a micro block transaction by hash and index
     - parameter hash: (path) The hash of the micro block 
     - parameter index: (path) The index of the transaction in a block 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<SignedTx> 
     */
    open class func getMicroBlockTransactionByHashAndIndexWithRequestBuilder(hash: String, index: Int, intAsString: Bool? = nil) -> RequestBuilder<SignedTx> {
        var localVariablePath = "/micro-blocks/hash/{hash}/transactions/index/{index}"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The hash of the micro block 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMicroBlockTransactionsByHash(hash: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SignedTxs?, _ error: Error?) -> Void)) {
        getMicroBlockTransactionsByHashWithRequestBuilder(hash: hash, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /micro-blocks/hash/{hash}/transactions
     - Get micro block transactions by hash
     - parameter hash: (path) The hash of the micro block 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<SignedTxs> 
     */
    open class func getMicroBlockTransactionsByHashWithRequestBuilder(hash: String, intAsString: Bool? = nil) -> RequestBuilder<SignedTxs> {
        var localVariablePath = "/micro-blocks/hash/{hash}/transactions"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignedTxs>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The hash of the micro block 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMicroBlockTransactionsCountByHash(hash: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CountResponse?, _ error: Error?) -> Void)) {
        getMicroBlockTransactionsCountByHashWithRequestBuilder(hash: hash, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /micro-blocks/hash/{hash}/transactions/count
     - Get micro block transaction count by hash
     - parameter hash: (path) The hash of the micro block 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<CountResponse> 
     */
    open class func getMicroBlockTransactionsCountByHashWithRequestBuilder(hash: String, intAsString: Bool? = nil) -> RequestBuilder<CountResponse> {
        var localVariablePath = "/micro-blocks/hash/{hash}/transactions/count"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CountResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter name: (path) The name key of the name entry 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNameEntryByName(name: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NameEntry?, _ error: Error?) -> Void)) {
        getNameEntryByNameWithRequestBuilder(name: name, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /names/{name}
     - Get name entry from naming system
     - parameter name: (path) The name key of the name entry 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<NameEntry> 
     */
    open class func getNameEntryByNameWithRequestBuilder(name: String, intAsString: Bool? = nil) -> RequestBuilder<NameEntry> {
        var localVariablePath = "/names/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NameEntry>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter pubkey: (path) The public key of the oracle 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOracleByPubkey(pubkey: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RegisteredOracle?, _ error: Error?) -> Void)) {
        getOracleByPubkeyWithRequestBuilder(pubkey: pubkey, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /oracles/{pubkey}
     - Get an oracle by public key
     - parameter pubkey: (path) The public key of the oracle 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<RegisteredOracle> 
     */
    open class func getOracleByPubkeyWithRequestBuilder(pubkey: String, intAsString: Bool? = nil) -> RequestBuilder<RegisteredOracle> {
        var localVariablePath = "/oracles/{pubkey}"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegisteredOracle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getOracleQueriesByPubkey: String, CaseIterable {
        case _open = "open"
        case closed = "closed"
        case all = "all"
    }

    /**

     - parameter pubkey: (path) The public key of the oracle 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter from: (query) Last query id in previous page (optional)
     - parameter limit: (query) Max number of oracle queries (optional, default to 20)
     - parameter type: (query) The type of a query: open, closed or all (optional, default to .all)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOracleQueriesByPubkey(pubkey: String, intAsString: Bool? = nil, from: String? = nil, limit: Int? = nil, type: ModelType_getOracleQueriesByPubkey? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OracleQueries?, _ error: Error?) -> Void)) {
        getOracleQueriesByPubkeyWithRequestBuilder(pubkey: pubkey, intAsString: intAsString, from: from, limit: limit, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /oracles/{pubkey}/queries
     - Get oracle queries by public key
     - parameter pubkey: (path) The public key of the oracle 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter from: (query) Last query id in previous page (optional)
     - parameter limit: (query) Max number of oracle queries (optional, default to 20)
     - parameter type: (query) The type of a query: open, closed or all (optional, default to .all)
     - returns: RequestBuilder<OracleQueries> 
     */
    open class func getOracleQueriesByPubkeyWithRequestBuilder(pubkey: String, intAsString: Bool? = nil, from: String? = nil, limit: Int? = nil, type: ModelType_getOracleQueriesByPubkey? = nil) -> RequestBuilder<OracleQueries> {
        var localVariablePath = "/oracles/{pubkey}/queries"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "type": type?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OracleQueries>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter pubkey: (path) The public key of the oracle 
     - parameter queryId: (path) The ID of the query 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOracleQueryByPubkeyAndQueryId(pubkey: String, queryId: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OracleQuery?, _ error: Error?) -> Void)) {
        getOracleQueryByPubkeyAndQueryIdWithRequestBuilder(pubkey: pubkey, queryId: queryId, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /oracles/{pubkey}/queries/{query-id}
     - Get an oracle query by public key and query ID
     - parameter pubkey: (path) The public key of the oracle 
     - parameter queryId: (path) The ID of the query 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<OracleQuery> 
     */
    open class func getOracleQueryByPubkeyAndQueryIdWithRequestBuilder(pubkey: String, queryId: String, intAsString: Bool? = nil) -> RequestBuilder<OracleQuery> {
        var localVariablePath = "/oracles/{pubkey}/queries/{query-id}"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let queryIdPreEscape = "\(APIHelper.mapValueToPathItem(queryId))"
        let queryIdPostEscape = queryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{query-id}", with: queryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OracleQuery>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPeerPubkey(intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PeerPubKey?, _ error: Error?) -> Void)) {
        getPeerPubkeyWithRequestBuilder(intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /peers/pubkey
     - Get peer public key
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<PeerPubKey> 
     */
    open class func getPeerPubkeyWithRequestBuilder(intAsString: Bool? = nil) -> RequestBuilder<PeerPubKey> {
        let localVariablePath = "/peers/pubkey"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PeerPubKey>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter pubkey: (path) The public key of the account 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPendingAccountTransactionsByPubkey(pubkey: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SignedTxs?, _ error: Error?) -> Void)) {
        getPendingAccountTransactionsByPubkeyWithRequestBuilder(pubkey: pubkey, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /accounts/{pubkey}/transactions/pending
     - Get pending account transactions by public key
     - parameter pubkey: (path) The public key of the account 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<SignedTxs> 
     */
    open class func getPendingAccountTransactionsByPubkeyWithRequestBuilder(pubkey: String, intAsString: Bool? = nil) -> RequestBuilder<SignedTxs> {
        var localVariablePath = "/accounts/{pubkey}/transactions/pending"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignedTxs>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPendingKeyBlock(intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: KeyBlock?, _ error: Error?) -> Void)) {
        getPendingKeyBlockWithRequestBuilder(intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /key-blocks/pending
     - Get the pending key block
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<KeyBlock> 
     */
    open class func getPendingKeyBlockWithRequestBuilder(intAsString: Bool? = nil) -> RequestBuilder<KeyBlock> {
        let localVariablePath = "/key-blocks/pending"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KeyBlock>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStatus(intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Status?, _ error: Error?) -> Void)) {
        getStatusWithRequestBuilder(intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /status
     - Get the status of a node
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Status> 
     */
    open class func getStatusWithRequestBuilder(intAsString: Bool? = nil) -> RequestBuilder<Status> {
        let localVariablePath = "/status"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Status>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTopHeader(intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Header?, _ error: Error?) -> Void)) {
        getTopHeaderWithRequestBuilder(intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /headers/top
     - Get the top header (either key or micro block)
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Header> 
     */
    open class func getTopHeaderWithRequestBuilder(intAsString: Bool? = nil) -> RequestBuilder<Header> {
        let localVariablePath = "/headers/top"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Header>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The hash of the transaction 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionByHash(hash: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SignedTx?, _ error: Error?) -> Void)) {
        getTransactionByHashWithRequestBuilder(hash: hash, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /transactions/{hash}
     - Get a transaction by hash
     - parameter hash: (path) The hash of the transaction 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<SignedTx> 
     */
    open class func getTransactionByHashWithRequestBuilder(hash: String, intAsString: Bool? = nil) -> RequestBuilder<SignedTx> {
        var localVariablePath = "/transactions/{hash}"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hash: (path) The hash of the transaction 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionInfoByHash(hash: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TxInfoObject?, _ error: Error?) -> Void)) {
        getTransactionInfoByHashWithRequestBuilder(hash: hash, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /transactions/{hash}/info
     - parameter hash: (path) The hash of the transaction 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<TxInfoObject> 
     */
    open class func getTransactionInfoByHashWithRequestBuilder(hash: String, intAsString: Bool? = nil) -> RequestBuilder<TxInfoObject> {
        var localVariablePath = "/transactions/{hash}/info"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TxInfoObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter encodedTx: (body) The new transaction 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTransaction(encodedTx: EncodedTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PostTxResponse?, _ error: Error?) -> Void)) {
        postTransactionWithRequestBuilder(encodedTx: encodedTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /transactions
     - Post a new transaction
     - parameter encodedTx: (body) The new transaction 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<PostTxResponse> 
     */
    open class func postTransactionWithRequestBuilder(encodedTx: EncodedTx, intAsString: Bool? = nil) -> RequestBuilder<PostTxResponse> {
        let localVariablePath = "/transactions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: encodedTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PostTxResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter dryRunInput: (body) transactions 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func protectedDryRunTxs(dryRunInput: DryRunInput, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DryRunResults?, _ error: Error?) -> Void)) {
        protectedDryRunTxsWithRequestBuilder(dryRunInput: dryRunInput, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /dry-run
     - Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a default value of 1000000 is being used instead.
     - parameter dryRunInput: (body) transactions 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<DryRunResults> 
     */
    open class func protectedDryRunTxsWithRequestBuilder(dryRunInput: DryRunInput, intAsString: Bool? = nil) -> RequestBuilder<DryRunResults> {
        let localVariablePath = "/dry-run"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dryRunInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DryRunResults>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
