//
// ChannelAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ChannelAPI {

    /**

     - parameter pubkey: (path) The pubkey of the channel 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChannelByPubkey(pubkey: String, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Channel?, _ error: Error?) -> Void)) {
        getChannelByPubkeyWithRequestBuilder(pubkey: pubkey, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /channels/{pubkey}
     - Get channel by public key
     - parameter pubkey: (path) The pubkey of the channel 
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<Channel> 
     */
    open class func getChannelByPubkeyWithRequestBuilder(pubkey: String, intAsString: Bool? = nil) -> RequestBuilder<Channel> {
        var localVariablePath = "/channels/{pubkey}"
        let pubkeyPreEscape = "\(APIHelper.mapValueToPathItem(pubkey))"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Channel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter channelCloseMutualTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChannelCloseMutual(channelCloseMutualTx: ChannelCloseMutualTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnsignedTx?, _ error: Error?) -> Void)) {
        postChannelCloseMutualWithRequestBuilder(channelCloseMutualTx: channelCloseMutualTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /debug/channels/close/mutual
     - Get a channel_close_mutual transaction object
     - parameter channelCloseMutualTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<UnsignedTx> 
     */
    open class func postChannelCloseMutualWithRequestBuilder(channelCloseMutualTx: ChannelCloseMutualTx, intAsString: Bool? = nil) -> RequestBuilder<UnsignedTx> {
        let localVariablePath = "/debug/channels/close/mutual"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelCloseMutualTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnsignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter channelCloseSoloTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChannelCloseSolo(channelCloseSoloTx: ChannelCloseSoloTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnsignedTx?, _ error: Error?) -> Void)) {
        postChannelCloseSoloWithRequestBuilder(channelCloseSoloTx: channelCloseSoloTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /debug/channels/close/solo
     - Get a channel_close_solo transaction object
     - parameter channelCloseSoloTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<UnsignedTx> 
     */
    open class func postChannelCloseSoloWithRequestBuilder(channelCloseSoloTx: ChannelCloseSoloTx, intAsString: Bool? = nil) -> RequestBuilder<UnsignedTx> {
        let localVariablePath = "/debug/channels/close/solo"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelCloseSoloTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnsignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter channelCreateTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChannelCreate(channelCreateTx: ChannelCreateTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnsignedTx?, _ error: Error?) -> Void)) {
        postChannelCreateWithRequestBuilder(channelCreateTx: channelCreateTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /debug/channels/create
     - Get a channel_create transaction object
     - parameter channelCreateTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<UnsignedTx> 
     */
    open class func postChannelCreateWithRequestBuilder(channelCreateTx: ChannelCreateTx, intAsString: Bool? = nil) -> RequestBuilder<UnsignedTx> {
        let localVariablePath = "/debug/channels/create"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelCreateTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnsignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter channelDepositTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChannelDeposit(channelDepositTx: ChannelDepositTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnsignedTx?, _ error: Error?) -> Void)) {
        postChannelDepositWithRequestBuilder(channelDepositTx: channelDepositTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /debug/channels/deposit
     - Get a channel_deposit transaction object
     - parameter channelDepositTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<UnsignedTx> 
     */
    open class func postChannelDepositWithRequestBuilder(channelDepositTx: ChannelDepositTx, intAsString: Bool? = nil) -> RequestBuilder<UnsignedTx> {
        let localVariablePath = "/debug/channels/deposit"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelDepositTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnsignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter channelSetDelegatesTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChannelSetDelegates(channelSetDelegatesTx: ChannelSetDelegatesTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnsignedTx?, _ error: Error?) -> Void)) {
        postChannelSetDelegatesWithRequestBuilder(channelSetDelegatesTx: channelSetDelegatesTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /debug/channels/set-delegates
     - Get a channel_set_delegates_tx transaction object
     - parameter channelSetDelegatesTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<UnsignedTx> 
     */
    open class func postChannelSetDelegatesWithRequestBuilder(channelSetDelegatesTx: ChannelSetDelegatesTx, intAsString: Bool? = nil) -> RequestBuilder<UnsignedTx> {
        let localVariablePath = "/debug/channels/set-delegates"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelSetDelegatesTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnsignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter channelSettleTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChannelSettle(channelSettleTx: ChannelSettleTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnsignedTx?, _ error: Error?) -> Void)) {
        postChannelSettleWithRequestBuilder(channelSettleTx: channelSettleTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /debug/channels/settle
     - Get a channel_settle transaction object
     - parameter channelSettleTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<UnsignedTx> 
     */
    open class func postChannelSettleWithRequestBuilder(channelSettleTx: ChannelSettleTx, intAsString: Bool? = nil) -> RequestBuilder<UnsignedTx> {
        let localVariablePath = "/debug/channels/settle"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelSettleTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnsignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter channelSlashTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChannelSlash(channelSlashTx: ChannelSlashTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnsignedTx?, _ error: Error?) -> Void)) {
        postChannelSlashWithRequestBuilder(channelSlashTx: channelSlashTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /debug/channels/slash
     - Get a channel_slash transaction object
     - parameter channelSlashTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<UnsignedTx> 
     */
    open class func postChannelSlashWithRequestBuilder(channelSlashTx: ChannelSlashTx, intAsString: Bool? = nil) -> RequestBuilder<UnsignedTx> {
        let localVariablePath = "/debug/channels/slash"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelSlashTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnsignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter channelSnapshotSoloTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChannelSnapshotSolo(channelSnapshotSoloTx: ChannelSnapshotSoloTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnsignedTx?, _ error: Error?) -> Void)) {
        postChannelSnapshotSoloWithRequestBuilder(channelSnapshotSoloTx: channelSnapshotSoloTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /debug/channels/snapshot/solo
     - Get a channel_snapshot_solo transaction object
     - parameter channelSnapshotSoloTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<UnsignedTx> 
     */
    open class func postChannelSnapshotSoloWithRequestBuilder(channelSnapshotSoloTx: ChannelSnapshotSoloTx, intAsString: Bool? = nil) -> RequestBuilder<UnsignedTx> {
        let localVariablePath = "/debug/channels/snapshot/solo"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelSnapshotSoloTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnsignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter channelWithdrawTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChannelWithdraw(channelWithdrawTx: ChannelWithdrawTx, intAsString: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnsignedTx?, _ error: Error?) -> Void)) {
        postChannelWithdrawWithRequestBuilder(channelWithdrawTx: channelWithdrawTx, intAsString: intAsString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /debug/channels/withdraw
     - Get a channel_withdrawal transaction object
     - parameter channelWithdrawTx: (body)  
     - parameter intAsString: (query) If this flag is set to true, the response will have all integers set as strings (optional, default to false)
     - returns: RequestBuilder<UnsignedTx> 
     */
    open class func postChannelWithdrawWithRequestBuilder(channelWithdrawTx: ChannelWithdrawTx, intAsString: Bool? = nil) -> RequestBuilder<UnsignedTx> {
        let localVariablePath = "/debug/channels/withdraw"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelWithdrawTx)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "int-as-string": intAsString?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnsignedTx>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
