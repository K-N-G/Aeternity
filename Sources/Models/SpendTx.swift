//
// SpendTx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SpendTx: Codable, Hashable {

    /** Base58Check encoded tagged pubkey */
    public var recipientId: String
    public var amount: ModelUInt
    public var fee: ModelUInt
    public var ttl: ModelUInt64?
    /** Base58Check encoded tagged pubkey */
    public var senderId: String
    public var nonce: ModelUInt64?
    /** Base64Check encoded tagged byte array */
    public var payload: String

    public init(recipientId: String, amount: ModelUInt, fee: ModelUInt, ttl: ModelUInt64? = nil, senderId: String, nonce: ModelUInt64? = nil, payload: String) {
        self.recipientId = recipientId
        self.amount = amount
        self.fee = fee
        self.ttl = ttl
        self.senderId = senderId
        self.nonce = nonce
        self.payload = payload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case recipientId = "recipient_id"
        case amount
        case fee
        case ttl
        case senderId = "sender_id"
        case nonce
        case payload
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(recipientId, forKey: .recipientId)
        try container.encode(amount, forKey: .amount)
        try container.encode(fee, forKey: .fee)
        try container.encodeIfPresent(ttl, forKey: .ttl)
        try container.encode(senderId, forKey: .senderId)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encode(payload, forKey: .payload)
    }
}

