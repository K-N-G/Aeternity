//
// Tx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Tx: Codable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case spendTx = "SpendTx"
        case channelCreateTx = "ChannelCreateTx"
        case channelDepositTx = "ChannelDepositTx"
        case channelWithdrawTx = "ChannelWithdrawTx"
        case channelForceProgressTx = "ChannelForceProgressTx"
        case channelCloseMutualTx = "ChannelCloseMutualTx"
        case channelCloseSoloTx = "ChannelCloseSoloTx"
        case channelSlashTx = "ChannelSlashTx"
        case channelSettleTx = "ChannelSettleTx"
        case channelSnapshotSoloTx = "ChannelSnapshotSoloTx"
        case channelSetDelegatesTx = "ChannelSetDelegatesTx"
        case oracleRegisterTx = "OracleRegisterTx"
        case oracleExtendTx = "OracleExtendTx"
        case oracleQueryTx = "OracleQueryTx"
        case oracleRespondTx = "OracleRespondTx"
        case namePreclaimTx = "NamePreclaimTx"
        case nameClaimTx = "NameClaimTx"
        case nameUpdateTx = "NameUpdateTx"
        case nameTransferTx = "NameTransferTx"
        case nameRevokeTx = "NameRevokeTx"
        case contractCreateTx = "ContractCreateTx"
        case contractCallTx = "ContractCallTx"
        case gaattachtx = "GAAttachTx"
        case gametatx = "GAMetaTx"
        case payingForTx = "PayingForTx"
    }
    public var version: ModelUInt32
    public var type: ModelType
    /** Base58Check encoded tagged pubkey */
    public var recipientId: String
    public var amount: ModelUInt
    public var fee: ModelUInt
    public var ttl: ModelUInt64?
    /** Base58Check encoded tagged pubkey */
    public var senderId: String
    public var nonce: ModelUInt64
    /** Base64Check encoded tagged byte array */
    public var payload: String
    /** Base58Check encoded tagged pubkey */
    public var initiatorId: String
    public var initiatorAmount: ModelUInt
    /** Base58Check encoded tagged pubkey */
    public var responderId: String
    public var responderAmount: ModelUInt
    public var channelReserve: ModelUInt
    public var lockPeriod: ModelUInt64
    /** Base58Check encoded tagged pubkey */
    public var stateHash: String
    public var delegateIds: Delegates?
    /** Base58Check encoded tagged pubkey */
    public var channelId: String
    /** Base58Check encoded tagged pubkey */
    public var fromId: String
    public var round: ModelUInt64
    /** Base58Check encoded tagged pubkey */
    public var toId: String
    public var update: OffChainUpdate
    /** Base64Check encoded tagged byte array */
    public var offchainTrees: String?
    public var initiatorAmountFinal: ModelUInt
    public var responderAmountFinal: ModelUInt
    /** Base64Check encoded tagged byte array */
    public var poi: String
    public var initiatorDelegateIds: [String]
    public var responderDelegateIds: [String]
    public var queryFormat: String
    public var responseFormat: String
    public var queryFee: ModelUInt
    public var oracleTtl: RelativeTTL
    /** Base58Check encoded tagged pubkey */
    public var accountId: String
    public var abiVersion: ModelUInt16
    /** Base58Check encoded tagged pubkey */
    public var oracleId: String
    public var query: String
    public var queryTtl: TTL
    public var responseTtl: RelativeTTL
    /** Base58Check encoded tagged value */
    public var queryId: String
    public var response: String
    /** Base58Check encoded tagged value */
    public var commitmentId: String
    public var name: String
    public var nameSalt: ModelUInt
    public var nameFee: ModelUInt?
    /** Base58Check encoded tagged value */
    public var nameId: String
    public var nameTtl: ModelUInt64
    public var pointers: [NamePointer]
    public var clientTtl: ModelUInt64
    /** Base58Check encoded tagged pubkey */
    public var ownerId: String
    /** Base64Check encoded tagged byte array */
    public var code: String
    public var vmVersion: ModelUInt16
    public var deposit: ModelUInt
    public var gas: ModelUInt64
    public var gasPrice: ModelUInt
    /** Base64Check encoded tagged byte array */
    public var callData: String
    /** Base58Check encoded tagged pubkey */
    public var callerId: String
    /** Base58Check encoded tagged pubkey */
    public var contractId: String
    /** Contract authorization function hash (hex encoded) */
    public var authFun: String
    /** Base58Check encoded tagged pubkey */
    public var gaId: String
    /** Base64Check encoded tagged byte array */
    public var authData: String
    public var tx: SignedTx
    /** Base58Check encoded tagged pubkey */
    public var payerId: String

    public init(version: ModelUInt32, type: ModelType, recipientId: String, amount: ModelUInt, fee: ModelUInt, ttl: ModelUInt64? = nil, senderId: String, nonce: ModelUInt64, payload: String, initiatorId: String, initiatorAmount: ModelUInt, responderId: String, responderAmount: ModelUInt, channelReserve: ModelUInt, lockPeriod: ModelUInt64, stateHash: String, delegateIds: Delegates? = nil, channelId: String, fromId: String, round: ModelUInt64, toId: String, update: OffChainUpdate, offchainTrees: String? = nil, initiatorAmountFinal: ModelUInt, responderAmountFinal: ModelUInt, poi: String, initiatorDelegateIds: [String], responderDelegateIds: [String], queryFormat: String, responseFormat: String, queryFee: ModelUInt, oracleTtl: RelativeTTL, accountId: String, abiVersion: ModelUInt16, oracleId: String, query: String, queryTtl: TTL, responseTtl: RelativeTTL, queryId: String, response: String, commitmentId: String, name: String, nameSalt: ModelUInt, nameFee: ModelUInt? = nil, nameId: String, nameTtl: ModelUInt64, pointers: [NamePointer], clientTtl: ModelUInt64, ownerId: String, code: String, vmVersion: ModelUInt16, deposit: ModelUInt, gas: ModelUInt64, gasPrice: ModelUInt, callData: String, callerId: String, contractId: String, authFun: String, gaId: String, authData: String, tx: SignedTx, payerId: String) {
        self.version = version
        self.type = type
        self.recipientId = recipientId
        self.amount = amount
        self.fee = fee
        self.ttl = ttl
        self.senderId = senderId
        self.nonce = nonce
        self.payload = payload
        self.initiatorId = initiatorId
        self.initiatorAmount = initiatorAmount
        self.responderId = responderId
        self.responderAmount = responderAmount
        self.channelReserve = channelReserve
        self.lockPeriod = lockPeriod
        self.stateHash = stateHash
        self.delegateIds = delegateIds
        self.channelId = channelId
        self.fromId = fromId
        self.round = round
        self.toId = toId
        self.update = update
        self.offchainTrees = offchainTrees
        self.initiatorAmountFinal = initiatorAmountFinal
        self.responderAmountFinal = responderAmountFinal
        self.poi = poi
        self.initiatorDelegateIds = initiatorDelegateIds
        self.responderDelegateIds = responderDelegateIds
        self.queryFormat = queryFormat
        self.responseFormat = responseFormat
        self.queryFee = queryFee
        self.oracleTtl = oracleTtl
        self.accountId = accountId
        self.abiVersion = abiVersion
        self.oracleId = oracleId
        self.query = query
        self.queryTtl = queryTtl
        self.responseTtl = responseTtl
        self.queryId = queryId
        self.response = response
        self.commitmentId = commitmentId
        self.name = name
        self.nameSalt = nameSalt
        self.nameFee = nameFee
        self.nameId = nameId
        self.nameTtl = nameTtl
        self.pointers = pointers
        self.clientTtl = clientTtl
        self.ownerId = ownerId
        self.code = code
        self.vmVersion = vmVersion
        self.deposit = deposit
        self.gas = gas
        self.gasPrice = gasPrice
        self.callData = callData
        self.callerId = callerId
        self.contractId = contractId
        self.authFun = authFun
        self.gaId = gaId
        self.authData = authData
        self.tx = tx
        self.payerId = payerId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case type
        case recipientId = "recipient_id"
        case amount
        case fee
        case ttl
        case senderId = "sender_id"
        case nonce
        case payload
        case initiatorId = "initiator_id"
        case initiatorAmount = "initiator_amount"
        case responderId = "responder_id"
        case responderAmount = "responder_amount"
        case channelReserve = "channel_reserve"
        case lockPeriod = "lock_period"
        case stateHash = "state_hash"
        case delegateIds = "delegate_ids"
        case channelId = "channel_id"
        case fromId = "from_id"
        case round
        case toId = "to_id"
        case update
        case offchainTrees = "offchain_trees"
        case initiatorAmountFinal = "initiator_amount_final"
        case responderAmountFinal = "responder_amount_final"
        case poi
        case initiatorDelegateIds = "initiator_delegate_ids"
        case responderDelegateIds = "responder_delegate_ids"
        case queryFormat = "query_format"
        case responseFormat = "response_format"
        case queryFee = "query_fee"
        case oracleTtl = "oracle_ttl"
        case accountId = "account_id"
        case abiVersion = "abi_version"
        case oracleId = "oracle_id"
        case query
        case queryTtl = "query_ttl"
        case responseTtl = "response_ttl"
        case queryId = "query_id"
        case response
        case commitmentId = "commitment_id"
        case name
        case nameSalt = "name_salt"
        case nameFee = "name_fee"
        case nameId = "name_id"
        case nameTtl = "name_ttl"
        case pointers
        case clientTtl = "client_ttl"
        case ownerId = "owner_id"
        case code
        case vmVersion = "vm_version"
        case deposit
        case gas
        case gasPrice = "gas_price"
        case callData = "call_data"
        case callerId = "caller_id"
        case contractId = "contract_id"
        case authFun = "auth_fun"
        case gaId = "ga_id"
        case authData = "auth_data"
        case tx
        case payerId = "payer_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(version, forKey: .version)
        try container.encode(type, forKey: .type)
        try container.encode(recipientId, forKey: .recipientId)
        try container.encode(amount, forKey: .amount)
        try container.encode(fee, forKey: .fee)
        try container.encodeIfPresent(ttl, forKey: .ttl)
        try container.encode(senderId, forKey: .senderId)
        try container.encode(nonce, forKey: .nonce)
        try container.encode(payload, forKey: .payload)
        try container.encode(initiatorId, forKey: .initiatorId)
        try container.encode(initiatorAmount, forKey: .initiatorAmount)
        try container.encode(responderId, forKey: .responderId)
        try container.encode(responderAmount, forKey: .responderAmount)
        try container.encode(channelReserve, forKey: .channelReserve)
        try container.encode(lockPeriod, forKey: .lockPeriod)
        try container.encode(stateHash, forKey: .stateHash)
        try container.encodeIfPresent(delegateIds, forKey: .delegateIds)
        try container.encode(channelId, forKey: .channelId)
        try container.encode(fromId, forKey: .fromId)
        try container.encode(round, forKey: .round)
        try container.encode(toId, forKey: .toId)
        try container.encode(update, forKey: .update)
        try container.encodeIfPresent(offchainTrees, forKey: .offchainTrees)
        try container.encode(initiatorAmountFinal, forKey: .initiatorAmountFinal)
        try container.encode(responderAmountFinal, forKey: .responderAmountFinal)
        try container.encode(poi, forKey: .poi)
        try container.encode(initiatorDelegateIds, forKey: .initiatorDelegateIds)
        try container.encode(responderDelegateIds, forKey: .responderDelegateIds)
        try container.encode(queryFormat, forKey: .queryFormat)
        try container.encode(responseFormat, forKey: .responseFormat)
        try container.encode(queryFee, forKey: .queryFee)
        try container.encode(oracleTtl, forKey: .oracleTtl)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(abiVersion, forKey: .abiVersion)
        try container.encode(oracleId, forKey: .oracleId)
        try container.encode(query, forKey: .query)
        try container.encode(queryTtl, forKey: .queryTtl)
        try container.encode(responseTtl, forKey: .responseTtl)
        try container.encode(queryId, forKey: .queryId)
        try container.encode(response, forKey: .response)
        try container.encode(commitmentId, forKey: .commitmentId)
        try container.encode(name, forKey: .name)
        try container.encode(nameSalt, forKey: .nameSalt)
        try container.encodeIfPresent(nameFee, forKey: .nameFee)
        try container.encode(nameId, forKey: .nameId)
        try container.encode(nameTtl, forKey: .nameTtl)
        try container.encode(pointers, forKey: .pointers)
        try container.encode(clientTtl, forKey: .clientTtl)
        try container.encode(ownerId, forKey: .ownerId)
        try container.encode(code, forKey: .code)
        try container.encode(vmVersion, forKey: .vmVersion)
        try container.encode(deposit, forKey: .deposit)
        try container.encode(gas, forKey: .gas)
        try container.encode(gasPrice, forKey: .gasPrice)
        try container.encode(callData, forKey: .callData)
        try container.encode(callerId, forKey: .callerId)
        try container.encode(contractId, forKey: .contractId)
        try container.encode(authFun, forKey: .authFun)
        try container.encode(gaId, forKey: .gaId)
        try container.encode(authData, forKey: .authData)
        try container.encode(tx, forKey: .tx)
        try container.encode(payerId, forKey: .payerId)
    }
}

