//
// NameClaimDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NameClaimDetail: Codable, Hashable {

    public var blockHash: String?
    public var blockHeight: Int?
    public var hash: String?
    public var microIndex: Int?
    public var microTime: Int?
    public var signatures: [String]?
    public var tx: NameClaimTx?
    public var txIndex: Int?

    public init(blockHash: String? = nil, blockHeight: Int? = nil, hash: String? = nil, microIndex: Int? = nil, microTime: Int? = nil, signatures: [String]? = nil, tx: NameClaimTx? = nil, txIndex: Int? = nil) {
        self.blockHash = blockHash
        self.blockHeight = blockHeight
        self.hash = hash
        self.microIndex = microIndex
        self.microTime = microTime
        self.signatures = signatures
        self.tx = tx
        self.txIndex = txIndex
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blockHash = "block_hash"
        case blockHeight = "block_height"
        case hash
        case microIndex = "micro_index"
        case microTime = "micro_time"
        case signatures
        case tx
        case txIndex = "tx_index"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(blockHash, forKey: .blockHash)
        try container.encodeIfPresent(blockHeight, forKey: .blockHeight)
        try container.encodeIfPresent(hash, forKey: .hash)
        try container.encodeIfPresent(microIndex, forKey: .microIndex)
        try container.encodeIfPresent(microTime, forKey: .microTime)
        try container.encodeIfPresent(signatures, forKey: .signatures)
        try container.encodeIfPresent(tx, forKey: .tx)
        try container.encodeIfPresent(txIndex, forKey: .txIndex)
    }
}

