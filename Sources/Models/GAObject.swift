//
// GAObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GAObject: Codable, Hashable {

    /** Base58Check encoded tagged pubkey */
    public var callerId: String
    public var height: ModelUInt64
    public var gasPrice: ModelUInt
    public var gasUsed: ModelUInt64
    /** Base64Check encoded tagged byte array */
    public var returnValue: String
    /** The status of the call 'ok | error'. */
    public var returnType: String
    public var innerObject: TxInfoObject?

    public init(callerId: String, height: ModelUInt64, gasPrice: ModelUInt, gasUsed: ModelUInt64, returnValue: String, returnType: String, innerObject: TxInfoObject? = nil) {
        self.callerId = callerId
        self.height = height
        self.gasPrice = gasPrice
        self.gasUsed = gasUsed
        self.returnValue = returnValue
        self.returnType = returnType
        self.innerObject = innerObject
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case callerId = "caller_id"
        case height
        case gasPrice = "gas_price"
        case gasUsed = "gas_used"
        case returnValue = "return_value"
        case returnType = "return_type"
        case innerObject = "inner_object"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(callerId, forKey: .callerId)
        try container.encode(height, forKey: .height)
        try container.encode(gasPrice, forKey: .gasPrice)
        try container.encode(gasUsed, forKey: .gasUsed)
        try container.encode(returnValue, forKey: .returnValue)
        try container.encode(returnType, forKey: .returnType)
        try container.encodeIfPresent(innerObject, forKey: .innerObject)
    }
}

