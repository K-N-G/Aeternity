//
// Channel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Channel: Codable, Hashable {

    /** Base58Check encoded tagged pubkey */
    public var id: String
    /** Base58Check encoded tagged pubkey */
    public var initiatorId: String
    /** Base58Check encoded tagged pubkey */
    public var responderId: String
    public var channelAmount: ModelUInt
    public var initiatorAmount: ModelUInt
    public var responderAmount: ModelUInt
    public var channelReserve: ModelUInt
    public var delegateIds: Delegates
    /** Base58Check encoded tagged hash */
    public var stateHash: String
    public var round: ModelUInt64
    public var soloRound: ModelUInt64
    public var lockPeriod: ModelUInt64
    public var lockedUntil: ModelUInt64

    public init(id: String, initiatorId: String, responderId: String, channelAmount: ModelUInt, initiatorAmount: ModelUInt, responderAmount: ModelUInt, channelReserve: ModelUInt, delegateIds: Delegates, stateHash: String, round: ModelUInt64, soloRound: ModelUInt64, lockPeriod: ModelUInt64, lockedUntil: ModelUInt64) {
        self.id = id
        self.initiatorId = initiatorId
        self.responderId = responderId
        self.channelAmount = channelAmount
        self.initiatorAmount = initiatorAmount
        self.responderAmount = responderAmount
        self.channelReserve = channelReserve
        self.delegateIds = delegateIds
        self.stateHash = stateHash
        self.round = round
        self.soloRound = soloRound
        self.lockPeriod = lockPeriod
        self.lockedUntil = lockedUntil
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case initiatorId = "initiator_id"
        case responderId = "responder_id"
        case channelAmount = "channel_amount"
        case initiatorAmount = "initiator_amount"
        case responderAmount = "responder_amount"
        case channelReserve = "channel_reserve"
        case delegateIds = "delegate_ids"
        case stateHash = "state_hash"
        case round
        case soloRound = "solo_round"
        case lockPeriod = "lock_period"
        case lockedUntil = "locked_until"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(initiatorId, forKey: .initiatorId)
        try container.encode(responderId, forKey: .responderId)
        try container.encode(channelAmount, forKey: .channelAmount)
        try container.encode(initiatorAmount, forKey: .initiatorAmount)
        try container.encode(responderAmount, forKey: .responderAmount)
        try container.encode(channelReserve, forKey: .channelReserve)
        try container.encode(delegateIds, forKey: .delegateIds)
        try container.encode(stateHash, forKey: .stateHash)
        try container.encode(round, forKey: .round)
        try container.encode(soloRound, forKey: .soloRound)
        try container.encode(lockPeriod, forKey: .lockPeriod)
        try container.encode(lockedUntil, forKey: .lockedUntil)
    }
}

