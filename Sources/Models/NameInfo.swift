//
// NameInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NameInfo: Codable, Hashable {

    public var activeFrom: Int?
    public var auctionTimeout: Int?
    public var claims: [Int]?
    public var expireHeight: Int?
    public var ownership: NameInfoOwnership?
    public var pointers: [String: String]?
    public var revoke: Int?
    public var transfers: [Int]?
    public var updates: [Int]?

    public init(activeFrom: Int? = nil, auctionTimeout: Int? = nil, claims: [Int]? = nil, expireHeight: Int? = nil, ownership: NameInfoOwnership? = nil, pointers: [String: String]? = nil, revoke: Int? = nil, transfers: [Int]? = nil, updates: [Int]? = nil) {
        self.activeFrom = activeFrom
        self.auctionTimeout = auctionTimeout
        self.claims = claims
        self.expireHeight = expireHeight
        self.ownership = ownership
        self.pointers = pointers
        self.revoke = revoke
        self.transfers = transfers
        self.updates = updates
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activeFrom = "active_from"
        case auctionTimeout = "auction_timeout"
        case claims
        case expireHeight = "expire_height"
        case ownership
        case pointers
        case revoke
        case transfers
        case updates
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(activeFrom, forKey: .activeFrom)
        try container.encodeIfPresent(auctionTimeout, forKey: .auctionTimeout)
        try container.encodeIfPresent(claims, forKey: .claims)
        try container.encodeIfPresent(expireHeight, forKey: .expireHeight)
        try container.encodeIfPresent(ownership, forKey: .ownership)
        try container.encodeIfPresent(pointers, forKey: .pointers)
        try container.encodeIfPresent(revoke, forKey: .revoke)
        try container.encodeIfPresent(transfers, forKey: .transfers)
        try container.encodeIfPresent(updates, forKey: .updates)
    }
}

