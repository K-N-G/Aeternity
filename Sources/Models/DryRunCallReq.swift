//
// DryRunCallReq.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DryRunCallReq: Codable, Hashable {

    /** Base64Check encoded tagged byte array */
    public var calldata: String
    /** Base58Check encoded tagged pubkey */
    public var contract: String
    public var amount: ModelUInt?
    public var gas: ModelUInt?
    /** Base58Check encoded tagged pubkey */
    public var caller: String?
    public var nonce: ModelUInt64?
    public var abiVersion: ModelUInt16?
    public var context: DryRunCallContext?

    public init(calldata: String, contract: String, amount: ModelUInt? = nil, gas: ModelUInt? = nil, caller: String? = nil, nonce: ModelUInt64? = nil, abiVersion: ModelUInt16? = nil, context: DryRunCallContext? = nil) {
        self.calldata = calldata
        self.contract = contract
        self.amount = amount
        self.gas = gas
        self.caller = caller
        self.nonce = nonce
        self.abiVersion = abiVersion
        self.context = context
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case calldata
        case contract
        case amount
        case gas
        case caller
        case nonce
        case abiVersion = "abi_version"
        case context
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(calldata, forKey: .calldata)
        try container.encode(contract, forKey: .contract)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(gas, forKey: .gas)
        try container.encodeIfPresent(caller, forKey: .caller)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encodeIfPresent(abiVersion, forKey: .abiVersion)
        try container.encodeIfPresent(context, forKey: .context)
    }
}

